c
uf
company_size_code
c
company_size_code.present?
c
company_size_code
c
query = search_uniq(params)
query
c
query.where('LOWER(cnpj) ILIKE ?', "%#{params[:cnpj]}%")
params[:cnpj]
query
c
query = search_uniq(params)
params
c
query.where(primary_cnae_code: params[:primary_cnae_code])
params[:primary_cnae_code].present?
params[:county_code].present?
query
c
params
c
params
c
params
search_uniq_params
c
search_uniq_params
c
County.find_by_code(r.county_code).description
r.county_code
r
c
Cnae.find_by_code(secondary_cnae_code).description
c
Cnae.find_by_code(secondary_cnae_code).description
c
Cnae.find_by_code(secondary_cnae_code).description
c
Cnae.find_by_code(secondary_cnae_code).description
c
Cnae.find_by_code(secondary_cnae_code).description
c
Cnae.find_by_code(secondary_cnae_code).description
c
Cnae.find_by_code(secondary_cnae_code)
c
Cnae.find_by_code(secondary_cnae_code)
c
Cnae.find_by_code(secondary_cnae_code)
c
Cnae.find_by_code("0163600")
Cnae.find_by_code(secondary_cnae_code)
Cnae.find_by_code(secondary_cnae_code).description
secondary_cnae_code
c
secondary_cnae_codes.split(',').class
secondary_cnae_codes.split(',')
secondary_cnae_codes
secondary_cnae_codes.to_d
secondary_cnae_codes.to_c
secondary_cnae_codes
secondary_cnae_codes.to_s
secondary_cnae_codes.to_i
secondary_cnae_codes.to_f
secondary_cnae_codes.to_r
secondary_cnae_codes.to_a
secondary_cnae_codes.class
secondary_cnae_codes
c
r
c
q.identification
q
c
a.try(description)
a = County.find(q.county_id)
County.find(q.county_id)
County.find(q.county_id).description
County.find(q.county_id).try(description)
County.find(q.county_id).try.description
County.find(q.county_id).description
County.find(q.county_id)
q.county_id
q.county
q.country
q.country?
q.country
q.county
q.country
"#{q.type_street} #{q.street} nº#{q.number}, #{q.complement}, #{}, #{q.district} - #{q.uf} - #{q.country}"
c
params
params.blank?
c
params.blank?
params
c
municipality.to_a.uniq { |uf| uf.district }
municipality.to_a.uniq! { |uf| uf.district }
municipality.count
municipality
c
municipality.count
municipalit
c
municipality = municipality.to_a.uniq! { |uf| uf.district }
municipality.to_a.uniq
municipality.to_a
municipality
municipality.count
municipality = where(county_id: county_id)
municipality
municipality = municipality.to_a.uniq! { |uf| uf.district }
c
municipality
c
lis
list
list.class
c
params
c
federal_union
federal_union.count
b = federal_union.uniq! {|uf| uf.county_id}
federal_union.uniq! {|uf| uf.county_id}.size
federal_union.uniq! {|uf| uf.county_id}
federal_union.uniq.size
federal_union.uniq
c
federal_union.class
federal_union.size
federal_union
c
ap federal_union
federal_union
c
aa = federal_union.uniq! { |fu| fu.county_id }
aa
aa.count
aa.coount
aa = a.uniq
a.uniq
a.class
a = federal_union.to_a
federal_union.to_a
federal_union.class
federal_union
ap federal_union
federal_union
c
a.count
a = federal_union.distinct
a = federal_union.uniq! { |fu| fu.county_id }
a.count
a = federal_union.uniq
federal_union.uniq
federal_union.count
exit
c
st.county.description
st.county.id
st.county
st.county_id
c
municipality.county_id
municipality.code
municipality
c
s.code
s
c
where(uf: uf).county_id.count
where(uf: uf).county_id
c
where(uf: uf)
a.uniq.count
a.count
a = where(uf: uf)
where(uf: uf)
c
params[:uf]
params
exit
c
code.to_i
code
exit
params['action']
params
params[:main_tables]
exit
param.to_i - 1
selected_method
methods
exit
0 - 1
methods
selected_method
param.to_i - 1
methods
param
exit
param
methods
exit
methods
*methods
methods
param
params
param
methods
selected_method
param.to_i - 1
param
exit
param
param.to_i - 1
selected_method
exit
code.nil?
code
c
legal_nature_id
exit
legal_natures_id
c
exit
params[:file]
params
exit
params
c
action_name
action
params
exit
params[:types]
params[:file].original_filename == 'Municipios.csv'
params[:file].original_filename
return redirect_to root_path, alert: 'Este arquivo não é valido' unless params[:file].original_filename == 'Municipios.csv'
params[:file].original_filename
params[:file].@original_filename
params[:file]
exit
@file
c
exit
params[:types]
params[:type]
params
